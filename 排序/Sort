
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include<math.h>
using namespace std;

int value[1 << 25];

/**
   *随机函数，可以随机产生num以内的num个随机数，并存在value数组中
   *@param value[]:将产生的随机数存在该数组内
   *@param num:表示可以产生num个数，同时这些随机数又不大于num
**/ 
void getRandomNum(int* value, int num)
{
    for(int i = 0;i < num; i++)
    {
        value[i] = (int)(rand()%num);
    }
}

/**
   *插入排序：将一个整型数组转化为按照非降序排序的数组
   *@input 输入是一个数组，以及数组的长度
   *@output 返回值为空，使得传入的整型数组按照非降序排列
   *@param value[]: 待排序的整型数组
   *@param location:作为插入的位置 
**/
void InsertSort(int* value,int len)
{
    for(int i=1;i<len;i++)
    {
        int temp=value[i];
        int location;
        for(int j=i-1;j>=0;j--)
        {
			if(temp<value[j])
            {
                value[j+1]=value[j];
                location=j;
            }
            else {
                location=j+1;
                break;
            }
        }
        value[location]=temp;
    }
}

/**归并
**/
void merge(int* value,int low,int high,int mid) 
{
	int temp[high-low+1];
	int s1=low;int s2=mid+1;int i=0;
	while(s1<=mid&&s2<=high)
	{
		if(value[s1]<value[s2])
		{
			temp[i]=value[s1];
			i++;s1++; 
		}
		else
		{
			temp[i]=value[s2];
			i++;s2++;
		} 
	}
	while(s1<=mid)
	{
		temp[i++]=value[s1++];
	}
	while(s2<=high)
	{
	    temp[i++]=value[s2++];	
	}
	for(int j=0;j<high-low+1;j++)
	value[j+low]=temp[j];
}

/**   *归并排序：将一个整型数组转化为按照非降序排序的数组
   *@input 输入是一个数组，以及数组的长度
   *@output 返回值为空，使得传入的整型数组按照非降序排列
   *@param value[]: 待排序的整型数组 
**/
void MergeSort(int* value,int low,int high)
{
	if(high-low<2) return;
	int mid=(low+high)/2;
	MergeSort(value,low,mid);
	MergeSort(value,mid+1,high);
	merge(value,low,high,mid);
}

/**
   *选择排序：将一个整型数组转化为按照非降序排序的数组
   *@input 输入是一个数组，以及数组的长度
   *@output 返回值为空，使得传入的整型数组按照非降序排列
   *@param value[]: 待排序的整型数组
   *@param len：整型数组的长度
**/
void SelectSort(int* value,int len)
{
	for(int i=0;i<len;i++)
	{
		int minsize=i;
		for(int j=i+1;j<len;j++)
		{
		if(value[j]<value[minsize])	minsize=j;
		}
		swap(value[i],value[minsize]);
	}
}

/**
   *冒泡排序：将一个整型数组转化为按照非降序排序的数组
   *@input 输入是一个数组，以及数组的长度
   *@output 返回值为空，使得传入的整型数组按照非降序排列
   *@param value[]: 待排序的整型数组
   *@param len：整型数组的长度
**/
void BubbleSort(int* value, int len)
{
	for(int i=0;i<len;i++)
	{
		for(int j=0;j<len-i-1;j++)
		{
			if(value[j]>value[j+1]) swap(value[j],value[j+1]);
		}
	}
}

/**
   *快速排序：分为划分和递归调用这两个步骤
   *@input 输入为一个int数组
   *@output 输出为按照非降序排列的数组
   *@param value[]:需要排序的数组
   *@param low：需要排序的下界
   *@param high：需要排序的上界
**/
void quickSort(int* value, int low, int high)
{
	if(low>=high) return;
	int k=value[low];
	int i=low,j=high;
	while(i!=j)
	{
		while(i<j&&value[j]>=k) j--;
		swap(value[i],value[j]);
		while(i<j&&value[i]<=k) i++;
		swap(value[i],value[j]);
	}
	quickSort(value,low,i-1);
	quickSort(value,i+1,high);
}

void OutPut(int* value,int len)
{
	for(int i=0;i<len;i++)
	{
		cout<<value[i]<<" ";
	}
	cout<<endl;
}

int main()
{
    int num;
    while(cin>>num)
    {
        clock_t  start,finish;
        getRandomNum(value,num);
        OutPut(value,num);
        //快速排序全部随机的数组
        start = clock();
        quickSort(value,0,num-1);
        finish = clock();
        cout << "Time in randomNums the quickSort is " << static_cast<double>(finish-start)/CLOCKS_PER_SEC*1000 << " ms" << endl;
        cout << "****************************************" << endl;
        //冒泡排序全部随机的数组
        start = clock();
        BubbleSort(value,num);
        finish = clock();
        cout << "Time in randomNums the BubbleSort is " << static_cast<double>(finish-start)/CLOCKS_PER_SEC*1000 << " ms" << endl;
        //选择排序全部随机的数组
        start = clock();
        SelectSort(value,num);
        finish = clock();
        cout << "Time in randomNums the selectSort is " << static_cast<double>(finish-start)/CLOCKS_PER_SEC*1000 << " ms" << endl;
       //插入排序全部随机的数组
        start = clock();
        InsertSort(value,num);
        finish = clock();
        cout << "Time in randomNums the insertSort is " << static_cast<double>(finish-start)/CLOCKS_PER_SEC*1000 << " ms" << endl;
        //归并排序全部随机的数组
        start = clock();
        MergeSort(value,0,num-1);
        finish = clock();
        cout << "Time in randomNums the mergeSort is " << static_cast<double>(finish-start)/CLOCKS_PER_SEC*1000 << " ms" << endl;
        
    }
}
